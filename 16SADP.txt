Subject.java

public interface Subject {
 public void notifyObserver();
}

Observer.java

public interface Observer {
 public void update();
}

DisplayElement.java

public interface DisplayElement {
 public void display();
}

DecimalData.java

public class DecimalData implements Subject {
 private List<Observer> observers;
 private int decimalValue;
 
 public DecimalData() {
  observers = new ArrayList<Observer>();
 }
 
 @Override
 public void registerObserver(Observer o) {
  observers.add(o);
 }
 
 @Override
 public void removeObserver(Observer o) {
  int index = observers.indexOf(o);
  if (index >= 0) {
   observers.remove(index);
  }
 }
 
 @Override
 public void notifyObserver() {
  for (Observer observer : observers) {
   observer.update();
  }
 }
 
 public void valuesChanged() {
  notifyObserver();
 }
 
 public int getDecimalValue() {
  return decimalValue;
 }
 
 public void setDecimalValue(int decimalValue) {
  this.decimalValue = decimalValue;
  valuesChanged();
 }
}

BinaryObserver.java

public class BinaryObserver implements Observer, DisplayElement {
 private Subject decimalSubject;
 private int decimalValue;
 
 public BinaryObserver(Subject decimalSubject) {
  this.decimalSubject = decimalSubject;
  decimalSubject.registerObserver(this);
 }
 
 @Override
 public void update() {
  DecimalData decimalData = null;
  if (decimalSubject instanceof DecimalData) {
   decimalData = (DecimalData) decimalSubject;
   decimalValue = decimalData.getDecimalValue();
  }
  display();
 }
 
 @Override
 public void display() {
  System.out.println("Binary String: "
    + Integer.toBinaryString(decimalValue));
 }
}

OctalObserver.java
 
public class OctalObserver implements Observer, DisplayElement {
 private Subject decimalSubject;
 private int decimalValue;
 
 public OctalObserver(Subject decimalSubject) {
  this.decimalSubject = decimalSubject;
  decimalSubject.registerObserver(this);
 }
 
 @Override
 public void update() {
  DecimalData decimalData = null;
  if (decimalSubject instanceof DecimalData) {
   decimalData = (DecimalData) decimalSubject;
   decimalValue = decimalData.getDecimalValue();
  }
  display();
 }
 @Override
 public void display() {
  System.out.println("Octal String: "
    + Integer.toOctalString(decimalValue));
 }
}

HexObserver.java

public class HexObserver implements Observer, DisplayElement {
 private Subject decimalSubject;
 private int decimalValue;
 
 public HexObserver(Subject decimalSubject) {
  this.decimalSubject = decimalSubject;
  decimalSubject.registerObserver(this);
 }
 
 @Override
 public void update() {
  DecimalData decimalData = null;
  if (decimalSubject instanceof DecimalData) {
   decimalData = (DecimalData) decimalSubject;
   decimalValue = decimalData.getDecimalValue();
  }
  display();
 }
 @Override
 public void display() {
  System.out.println("Hex String: " + Integer.toHexString(decimalValue));
 }
}

ObserverPatternDemo.java

public class ObserverPatternDemo {
 
 public static void main(String[] args) {
  DecimalData decimalData = new DecimalData();
  BinaryObserver binaryObserver = new BinaryObserver(decimalData);
  OctalObserver octalObserver = new OctalObserver(decimalData);
  HexObserver hexObserver = new HexObserver(decimalData);
 
  decimalData.setDecimalValue(24);
  System.out.println("\nNow, Data is changed.\n");
  decimalData.setDecimalValue(124);
 
 }
}